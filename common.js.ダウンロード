/* ===================================================================
javascript information

File Name  : common.js
Author     :
script Info : APP
=================================================================== */

var APP = APP || {};

APP = {
    immed:{
        viewportSetting:(function(){
            var viewport = document.createElement('meta');
            var content = !CHECK.mobile ? 'width=1000' : 'width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no';
            viewport.setAttribute('name','viewport');
            viewport.setAttribute('content',content);
            document.getElementsByTagName('head')[0].appendChild(viewport);
        }())
    },
    mod:{}
};

// Root settings *****************************************************

APP.root = function(){
    this.conf = {
        DEBUG_MODE:true
    };
    this.$html = $('html');
    this.$body = $('body');
    this.container = '#container';
    this.$container = $(this.container);
    this.disabledLinkItem = '.disabled-link-item';
    this.internalLinkItem = '.internal-link-item';
    this.tokenForAnchorItem = 'a[token-for-anchor]';
    this.wheelevent = 'onwheel' in document ? 'wheel' : 'onmousewheel' in document ? 'mousewheel' : 'DOMMouseScroll';
};

APP.root.prototype = {
    trace:function(logs){
        if(this.conf.DEBUG_MODE && window.console && typeof window.console.log === 'function') console.log(logs);
    },
    addClassHtml:function(){
        var deviceClass = CHECK.mobile ? 'device-mobile' : CHECK.tablet ? 'device-tablet' : 'device-pc';

        if(typeof DISP.browser.name !== 'undefined'){
            var browserName = DISP.browser.name.toLowerCase().replace(/\s+/g,'');
            var browserVer = DISP.browser.major_version;
            var browserClass = CHECK.ie ? 'bn-ie bv-' + browserVer : 'bn-' + browserName + ' bv-' + browserVer;
            this.$html.addClass(browserClass);
        }
        if(typeof DISP.os.name !== 'undefined'){
            var osGroup = DISP.os.group.toLowerCase().replace(/\s+/g,'');
            var osVer = DISP.os.major_version;
            var osClass = 'og-' + osGroup + ' ov-' + osVer;
            this.$html.addClass(osClass);
        }
        this.$html.addClass(deviceClass);
    },
    addEvent:function(){
        var bp = true; // PC = true
        var changeFlag = function(){
            if(DISP.viewport.width > 768 && bp == false){
                $(window).trigger('bpChange bpChangePc');
                $(window).trigger('bpChange');
                bp = !bp;
            }else if(DISP.viewport.width <= 768 && bp == true){
                $(window).trigger('bpChangeSp');
                $(window).trigger('bpChange');
                bp = !bp;
            }
        };

        changeFlag();

        $(window).on('load resize',function(){
            changeFlag();
        });
    },
    containerAdjustPadding:function(){
        var self = this;
        var adjust = function(){
            var paddingTop = APP.mod.header.$header.height();
            self.$container.css({ 'padding-top':paddingTop });
        };

        adjust();

        $(window).on('load resize',function(){
            adjust();
        });
    },
    disableLinks:function(){
        var self = this;

        $(document).on('click','a',function(event){
            var $target = $(event.target);
            if($target.is(self.disabledLinkItem) || $target.parents().is(self.disabledLinkItem)) event.preventDefault();
        });
    },
    smoothScroll:function(target){
        var $elm = $(target == '#' || target == '' ? 'html' : target);
        var spped = 500;
        var easing = 'swing';
        var headerHeight = APP.mod.header.$header.height();

        if($elm.size()){
            var offset = $elm.offset().top;
            $('html,body').animate({ scrollTop:offset - headerHeight },spped,easing);
        }
    },
    internalLinks:function(){
        var self = this;

        $(document).on('click',self.internalLinkItem,function(){
            var hash = $(this).attr('href');
            self.smoothScroll(hash);
            return false;
        });
    },
    createForm:function(action,data){
        var $form = $('<form action="' + action + '" method="post"></form>');
        for(input in data) {
            if(data.hasOwnProperty(input)){
                $form.append('<input name="' + input + '" value="' + data[input] + '">');
            }
        }
        return $form;
    },
    tokenForAnchor:function(){
        var self = this;

        // anchorをクリックした時にformを裏で作って指定のメソッドでリクエストを飛ばす
        // Twigには以下のように埋め込む
        // <a href="PATH" {{ csrf_token_for_anchor() }} data-method="(put/delete/postのうちいずれか)" data-confirm="xxxx" data-message="xxxx">
        //
        // オプション要素
        // data-confirm : falseを定義すると確認ダイアログを出さない。デフォルトはダイアログを出す
        // data-message : 確認ダイアログを出す際のメッセージをデフォルトから変更する

        $(document).on('click',self.tokenForAnchorItem,function(event){
            event.preventDefault();
            var $this = $(this);
            var data = $this.data();
            if(data.confirm != false){
                if(!confirm(data.message ? data.message : '削除してもよろしいですか?')){
                    return false;
                }
            }
            var $form = self.createForm($this.attr('href'),{
                _token:$this.attr('token-for-anchor'),
                _method:data.method
            }).hide();
            $('body').append($form); // Firefox requires form to be on the page to allow submission
            $form.submit();
        });
    },
    init:function(){
        this.addClassHtml();
        this.addEvent();
        this.containerAdjustPadding();
        this.disableLinks();
        this.internalLinks();
        this.tokenForAnchor();

        // Console ----->
        this.trace({ 'APP.root':this });
    }
};

// Module settings ***************************************************

// ===================================================================
//
// mod - ['header']
//
// ===================================================================

APP.mod.header = function(){
    this.header = '#g-header';
    this.$header = $(this.header);
    this.dropNav = this.header + ' .drop-nav';
    this.dropNavButton = this.header + ' .drop-nav-button';
    this.categorySelect = this.header + ' #g-header-category-select';
    this.$categorySelect = $(this.categorySelect);
    this.categorySelectId = this.header + ' #category_id';
};

APP.mod.header.prototype = {
    categorySelectTextChange:function(elm){
        var selectedText = $(elm).find('option:selected').text();
        this.$categorySelect.find('.selected-text').text(selectedText);
    },
    categorySelectInit:function(){
        var self = this;
        self.categorySelectTextChange(self.categorySelectId);
        $(document).on('change',self.categorySelectId,function(event){
            self.categorySelectTextChange(this);
        });
    },
    dropNavInit:function(){
      var self = this;
      $(document).on('click',self.dropNavButton,function(event){
          var $this = $(this);
          var $nav = $this.closest('.drop-nav');
          var $elseNav = $(self.dropNavButton).not(this).closest('.drop-nav');
          !$nav.hasClass('active') ? $nav.addClass('active') : $nav.removeClass('active');
          $elseNav.removeClass('active');
      });
      $(document).on('click',function(event){
          var target = event.target;
          var $target = $(target);
          if(!($target.is(self.dropNav) || $target.parents().is(self.dropNav))) $(self.dropNav).removeClass('active');
      });
    },
    init:function(){
        var self = this;

        self.dropNavInit();
        self.categorySelectInit();

        // Console ----->
        APP.root.trace({ 'APP.mod.header':this });
    }
};

// ===================================================================
//
// mod - ['pageTopButton']
//
// ===================================================================

APP.mod.pageTopButton = function(){
    this.pageTop = '#page-top';
    this.$pageTop = $(this.pageTop);
    this.pageTopButton = '#page-top-button';
    this.$pageTopButton = $(this.pageTopButton);
};

APP.mod.pageTopButton.prototype = {
    init:function(){
        var self = this;

        $(window).on('load scroll resize',function(event){
            var dispBottom = DISP.height + DISP.scrollTop;

            if(self.$pageTop.size()){
                var pageTopOffsetTop = self.$pageTop.offset().top;

                if(pageTopOffsetTop < dispBottom){
                    self.$pageTopButton.addClass('absolute');
                }else{
                    self.$pageTopButton.removeClass('absolute');
                }

                if(0 < DISP.scrollTop){
                    self.$pageTopButton.addClass('visible');
                }else{
                    self.$pageTopButton.removeClass('visible');
                }
            }
        });

        // Console ----->
        APP.root.trace({ 'APP.mod.pageTopButton':this });
    }
};

// ===================================================================
//
// mod - ['customSelectBox']
//
// ===================================================================

APP.mod.customSelectBox = function(){
    this.customElm = '.cmn-selectbox-1';
    this.$customElm = $(this.customElm);
    this.selectbox = this.customElm + ' > select';
};

APP.mod.customSelectBox.prototype = {
    init:function(){
        var self = this;

        self.$customElm.each(function(){
            var $this = $(this);
            var $selectText = $this.find('.selected-text');
            var text = $this.find('option:selected').text();
            $selectText.text(text);
        });

        $(document).on('change',self.selectbox,function(event){
            var $this = $(this);
            var $selectText = $this.next('.selected-text');
            var text = $this.find('option:selected').text();
            $selectText.text(text);
        });

        // Console ----->
        APP.root.trace({ 'APP.mod.customSelectBox':this });
    }
};

// ===================================================================
//
// mod - ['spDrawer']
//
// ===================================================================

APP.mod.spDrawer = function(){
    this.drawer = '#sp-drawer';
    this.$drawer = $(this.drawer);
    this.drawerItem = '.sp-drawer-item';
    this.$drawerItem = $(this.drawerItem);
    this.drawerOpen = '.sp-drawer-open';
    this.drawerClose = '.sp-drawer-close';
    this.template = '\
    <div id="sp-drawer-overlay"></div>\
    <div id="sp-drawer-menu">\
        <div id="sp-drawer-head">\
            <div class="sp-drawer-close cmn-drawer-close-btn-1"></div>\
        </div>\
        <div id="sp-drawer-body">\
            <div class="frame"></div>\
        </div>\
    </div>';
    this.checkItemsSize = this.$drawerItem.size();
    this.scroll = false;
};

APP.mod.spDrawer.prototype = {
    templateInit:function(){
        var self = this;

        if(self.checkItemsSize){
            self.$drawer.append(self.template);
            self.overlay = self.drawer + ' #sp-drawer-overlay';
            self.$overlay = $(self.overlay);
            self.menu = self.drawer + ' #sp-drawer-menu';
            self.$menu = $(self.menu);
            self.drawerBody = self.drawer + ' #sp-drawer-body';
            self.$drawerBody = $(self.drawerBody);
            self.frame = self.drawerBody + ' .frame';
            self.$frame = $(self.frame);
            self.$drawerItem.each(function(){
                var $clone = $(this).clone(true).removeClass('only-pc');
                self.$frame.append($clone);
            });
        }
    },
    scrollInit:function(){
        var self = this;

        if(self.checkItemsSize){
            self.scroll = self.$frame.niceScroll({
                cursorcolor:'#333',
                cursoropacitymin:0,
                cursoropacitymax:1,
                cursorwidth:'3px',
                cursorborder:'none',
                cursorborderradius:'2px',
                background:'rgba(221,221,221,0.6)',
                autohidemode:false
            });
        }
    },
    init:function(){
        var self = this;

        self.templateInit();
        self.scrollInit();

        if(self.scroll){
            self.$drawerBody.addClass('init');

            $(window).on('load resize resizeStop',function(event){
                self.scroll.resize();
            });
        }

        $(document).on('click',self.drawerOpen,function(event){
            document.body.style.overflow = 'hidden';
            document.documentElement.style.overflow = 'hidden';
            self.$drawer.addClass('open');
        });
        $(document).on('click',self.drawerClose,function(event){
            document.body.style.overflow = '';
            document.documentElement.style.overflow = '';
            self.$drawer.removeClass('open');
        });
        $(document).on('click',self.overlay,function(event){
            document.body.style.overflow = '';
            document.documentElement.style.overflow = '';
            self.$drawer.removeClass('open');
        });
        $(window).on('bpChange',function(event){
            document.body.style.overflow = '';
            document.documentElement.style.overflow = '';
            self.$drawer.removeClass('open');
        });
        var drawerBody = document.getElementById('sp-drawer-body');
        if (drawerBody) {
            drawerBody.addEventListener('touchstart', function (event) {
                var startY = event.touches[0].pageY;
                drawerBody.addEventListener('touchmove', function (event) {
                    var currentY = event.touches[0].pageY;
                    var scrollTop = drawerBody.scrollTop;
                    var scrollHeight = drawerBody.scrollHeight;
                    var offsetHeight = drawerBody.offsetHeight;
                    var atTop = scrollTop === 0;
                    var atBottom = scrollTop + offsetHeight >= scrollHeight;

                    if ((atTop && currentY > startY) || (atBottom && currentY < startY)) {
                        event.preventDefault();
                    }

                    startY = currentY;
                });
            });
        }

        // Console ----->
        APP.root.trace({ 'APP.mod.spDrawer':this });
    }
};

// ===================================================================
//
// mod - ['spDrawerMembers']
//
// ===================================================================

APP.mod.spDrawerMembers = function(){
    this.drawer = '#sp-drawer-members';
    this.$drawer = $(this.drawer);
    this.drawerItem = '.sp-drawer-members-item';
    this.$drawerItem = $(this.drawerItem);
    this.drawerOpen = '.sp-drawer-members-open';
    this.drawerClose = '.sp-drawer-members-close';
    this.template = '\
    <div id="sp-drawer-members-overlay"></div>\
    <div id="sp-drawer-members-menu">\
        <div id="sp-drawer-members-head">\
            <div class="sp-drawer-members-close cmn-drawer-close-btn-1"></div>\
        </div>\
        <div id="sp-drawer-members-body">\
            <div class="frame"></div>\
        </div>\
    </div>';
    this.checkItemsSize = this.$drawerItem.size();
    this.scroll = false;
};

APP.mod.spDrawerMembers.prototype = {
    templateInit:function(){
        var self = this;

        if(self.checkItemsSize){
            self.$drawer.append(self.template);
            self.overlay = self.drawer + ' #sp-drawer-members-overlay';
            self.$overlay = $(self.overlay);
            self.menu = self.drawer + ' #sp-drawer-members-menu';
            self.$menu = $(self.menu);
            self.drawerBody = self.drawer + ' #sp-drawer-members-body';
            self.$drawerBody = $(self.drawerBody);
            self.frame = self.drawerBody + ' .frame';
            self.$frame = $(self.frame);
            self.$drawerItem.each(function(){
                var $clone = $(this).clone(true).removeClass('only-pc');
                self.$frame.append($clone);
            });
        }
    },
    scrollInit:function(){
        var self = this;

        if(self.checkItemsSize){
            self.scroll = self.$frame.niceScroll({
                cursorcolor:'#333',
                cursoropacitymin:0,
                cursoropacitymax:1,
                cursorwidth:'3px',
                cursorborder:'none',
                cursorborderradius:'2px',
                background:'rgba(221,221,221,0.6)',
                autohidemode:false
            });
        }
    },
    init:function(){
        var self = this;

        self.templateInit();
        self.scrollInit();

        if(self.scroll){
            self.$drawerBody.addClass('init');

            $(window).on('load resize resizeStop',function(event){
                self.scroll.resize();
            });
        }

        $(document).on('click',self.drawerOpen,function(event){
            self.$drawer.addClass('open');
        });
        $(document).on('click',self.drawerClose,function(event){
            self.$drawer.removeClass('open');
        });
        $(document).on('click',self.overlay,function(event){
            self.$drawer.removeClass('open');
        });
        $(window).on('bpChange',function(event){
            self.$drawer.removeClass('open');
        });

        // Console ----->
        APP.root.trace({ 'APP.mod.spDrawerMembers':this });
    }
};

// ===================================================================
//
// mod - ['popupModal']
//
// ===================================================================

APP.mod.popupModal = function(){
    this.popupImage = '.popup-modal-image';
};

APP.mod.popupModal.prototype = {
    init:function(){
        var self = this;

        $(document).on('click',self.popupImage,function(event){
            var src = $(this).attr('href');

            event.preventDefault();

            $.magnificPopup.open({
                items:{ src:src },
                type:'image',
                image:{
                    markup:'\
                    <div class="mfp-figure">\
                        <div class="mfp-close"></div>\
                        <div class="mfp-img"></div>\
                    </div>',
                    cursor:'',
                    verticalFit:false
                },
                mainClass:'cmn-popup-modal-1 type-image',
                closeOnContentClick:false,
                closeOnBgClick:true,
                closeBtnInside:true,
                closeMarkup:'<div class="mfp-close"></div>',
                showCloseBtntrue:true,
                fixedContentPos:true,
                fixedBgPos:true,
                overflowY:'auto',
                removalDelay:600
            });
        });

        // Console ----->
        APP.root.trace({ 'APP.mod.popupModal':this });
    }
};

// ===================================================================
//
// mod - ['itemsCarousel']
//
// ===================================================================

APP.mod.itemsCarousel = function(){
    this.conf = {
        LINE_COUNT:4
    };
    this.carousel = '.cmn-items-carousel-1';
    this.$carousel = $(this.carousel);
};

APP.mod.itemsCarousel.prototype = {
    itemVisible:function($elm){
        if($elm.size()){
            $elm.children('.list').each(function(index){
                $(this).delay(index * 100).queue(function(){
                    $(this).addClass('visible').dequeue();
                });
            });
        }
    },
    itemHide:function($elm){
        if($elm.size()) $elm.children('.list').removeClass('visible');
    },
    frameAdjustHeight:function($elm){
        var $listTop = $elm.find('.list-top');
        if($listTop.size()) $listTop.tile();
    },
    frameDestroy:function($elm){
        var self = this;
        var $carousel = $elm;
        var $frame = $carousel.find('.frame');
        var $slidee = $carousel.find('.slidee');
        var $list = $slidee.find('.list');

        if(DISP.viewport.width > 768){
            if($carousel.hasClass('init')){
                $frame.sly(false);
                $carousel.removeClass('init sp');
            }
        }else{
            if($carousel.hasClass('init')){
                $slidee.slick('unslick');
                if($list.parent().is('.line-wrap')) $list.unwrap();
                $carousel.removeClass('init pc');
            }
        }
    },
    frameInitialized:function($elm){
        var self = this;
        var $carousel = $elm;
        var $frame = $carousel.find('.frame');
        var $slidee = $carousel.find('.slidee');
        var $arrow = $carousel.find('.carousel-arrow');
        var $arrowPrev = $arrow.find('.carousel-prev');
        var $arrowNext = $arrow.find('.carousel-next');
        var $defer = new $.Deferred();

        if(DISP.viewport.width > 768){
            do {
                $slidee.children('.list:lt(' + self.conf.LINE_COUNT + ')').wrapAll('<div class="line-wrap"></div>')
            }while($slidee.children('.list').length);

            $slidee.on('init',function(event,slick){
                $defer.resolve();
            });

            $slidee.slick({
                autoplay:false,
                arrows:true,
                prevArrow:$arrowPrev,
                nextArrow:$arrowNext,
                dots:false,
                fade:true,
                slidesToShow:1,
                slidesToScroll:1,
                adaptiveHeight:false,
                speed:0,
                infinite:false
            });

            // 初期化完了
            $defer.promise().then(function(){
                var currentSlide = $slidee.slick('slickCurrentSlide');
                var $current = $slidee.find('.line-wrap[data-slick-index="' + currentSlide + '"]');
                self.itemVisible($current);
                self.frameAdjustHeight($frame);

                $carousel.addClass('init pc');
            });

            $slidee.on('beforeChange',function(event,slick,currentSlide,nextSlide){
                var $current = $slidee.find('.line-wrap[data-slick-index="' + currentSlide + '"]');
                self.itemHide($current);
            });

            $slidee.on('afterChange',function(event,slick,currentSlide){
                var $current = $slidee.find('.line-wrap[data-slick-index="' + currentSlide + '"]');
                self.itemVisible($current);
            });
        }else{
            var sly = new Sly($frame.get(0),{
                horizontal:true,
                // ---- Item based navigation ----
                itemNav:'basic',
                smart:false,
                activateOn:null,
                // ---- Scrolling ----
                scrollBy:0,
                // ---- Dragging ----
                mouseDragging:true,
                touchDragging:true,
                releaseSwing:true,
                swingSpeed:0.2,
                elasticBounds:true,
                // ---- Mixed options ----
                easing:'swing',
                speed:400
            });

            sly.one('load',function(){
                $defer.resolve();
            });

            sly.on('moveEnd',function(){
                sly.pos.dest <= sly.pos.start ? $arrowPrev.addClass('disabled') : $arrowPrev.removeClass('disabled');
                sly.pos.dest >= sly.pos.end ? $arrowNext.addClass('disabled') : $arrowNext.removeClass('disabled');
            });

            sly.on('load',function(){
                sly.pos.dest <= sly.pos.start ? $arrowPrev.addClass('disabled') : $arrowPrev.removeClass('disabled');
                sly.pos.dest >= sly.pos.end ? $arrowNext.addClass('disabled') : $arrowNext.removeClass('disabled');
                sly.rel.frameSize > sly.rel.slideeSize ? $arrow.addClass('disabled') : $arrow.removeClass('disabled');
            });

            sly.init();

            // 初期化完了
            $defer.promise().then(function(){
                self.frameAdjustHeight($frame);

                $carousel.addClass('init sp');
            });

            $arrowNext.off('click');
            $arrowNext.on('click',function(event){
                if(sly.rel.lastItem == (sly.items.length - 1)){
                    sly.slideTo(sly.pos.end);
                }else{
                    sly.toStart(sly.rel.firstItem + 1);
                }
            });

            $arrowPrev.off('click');
            $arrowPrev.on('click',function(event){
                if(sly.rel.firstItem == 0){
                    sly.slideTo(sly.pos.start);
                }else{
                    sly.toStart(sly.rel.firstItem - 1);
                }
            });

            $(window).on('resize',function(event){
                sly.reload();
            });
        }
    },
    init:function(){
        var self = this;

        self.$carousel.each(function(){
            var $carousel = $(this);
            self.frameInitialized($carousel);
        });

        $(window).on('bpChange',function(){
            self.$carousel.each(function(){
                var $carousel = $(this);
                self.frameDestroy($carousel);
                self.frameInitialized($carousel);
            });
        });

        $(window).on('load resize resizeStop',function(event){
            self.$carousel.each(function(){
                var $carousel = $(this);
                self.frameAdjustHeight($carousel);
            });
        });

        // Console ----->
        APP.root.trace({ 'APP.mod.itemsCarousel':this });
    }
};

// Initialization ****************************************************

$(function(){

    // ヘッダー内メニューの高さ
    const setFillHeight = () => {
        const vh = window.innerHeight;
        document.documentElement.style.setProperty('--vh', `${vh}px`);
    }
    window.addEventListener('resize', setFillHeight);
    setFillHeight();

// Instance ---->
APP.root = new APP.root();
APP.mod.header = new APP.mod.header();
APP.mod.pageTopButton = new APP.mod.pageTopButton();
APP.mod.customSelectBox = new APP.mod.customSelectBox();
APP.mod.spDrawer = new APP.mod.spDrawer();
APP.mod.spDrawerMembers = new APP.mod.spDrawerMembers();
APP.mod.popupModal = new APP.mod.popupModal();
APP.mod.itemsCarousel = new APP.mod.itemsCarousel();

// Init -------->
APP.root.init();
APP.mod.header.init();
APP.mod.pageTopButton.init();
APP.mod.customSelectBox.init();
APP.mod.spDrawer.init();
APP.mod.spDrawerMembers.init();
APP.mod.popupModal.init();
APP.mod.itemsCarousel.init();

// Console ----->
APP.root.trace({ 'APP':APP });

});// [END]
